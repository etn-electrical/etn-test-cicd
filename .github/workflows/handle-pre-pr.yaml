name: Handle Pre-PR Events

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - develop
      - 'release/**'

permissions:
  contents: read
  pull-requests: write
  checks: read
  issues: write
  security-events: write
  actions: read

jobs:
  code-review:
    name: Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Basic Code Analysis
        run: |
          echo "## 🤖 Basic Code Analysis" > ai_analysis.md
          echo "" >> ai_analysis.md
          
          # Analyze file changes
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
          
          echo "### 📁 Changed Files Analysis" >> ai_analysis.md
          java_files=$(grep -E '\.(java)$' changed_files.txt | wc -l)
          xml_files=$(grep -E '\.(xml)$' changed_files.txt | wc -l)
          yaml_files=$(grep -E '\.(yaml|yml)$' changed_files.txt | wc -l)
          prop_files=$(grep -E '\.(properties)$' changed_files.txt | wc -l)
          
          echo "- **Java files changed:** $java_files" >> ai_analysis.md
          echo "- **XML files changed:** $xml_files" >> ai_analysis.md
          echo "- **YAML files changed:** $yaml_files" >> ai_analysis.md
          echo "- **Properties files changed:** $prop_files" >> ai_analysis.md
          echo "" >> ai_analysis.md
          
          # Check for Spring Boot specific patterns
          echo "### 🍃 Spring Boot Pattern Analysis" >> ai_analysis.md
          if grep -qE "(Controller|Service|Repository|Component|Entity)" changed_files.txt 2>/dev/null; then
            echo "- ✅ **Spring annotations detected** - Review for proper usage" >> ai_analysis.md
          fi
          
          if grep -qE "application\.(yml|yaml|properties)" changed_files.txt 2>/dev/null; then
            echo "- ⚙️ **Configuration changes detected** - Verify settings" >> ai_analysis.md
          fi
          
          if grep -qE "pom\.xml" changed_files.txt 2>/dev/null; then
            echo "- 📦 **Maven configuration changed** - Review dependencies" >> ai_analysis.md
          fi
          echo "" >> ai_analysis.md
          
          echo "### 📋 Manual Review Recommendations" >> ai_analysis.md
          echo "- Review code for Spring Boot best practices" >> ai_analysis.md
          echo "- Check security configurations" >> ai_analysis.md
          echo "- Validate error handling patterns" >> ai_analysis.md
          echo "- Ensure proper logging implementation" >> ai_analysis.md
          echo "- Verify test coverage for new functionality" >> ai_analysis.md

      - name: Upload Basic Analysis
        uses: actions/upload-artifact@v4
        with:
          name: basic-analysis-${{ github.event.pull_request.number }}
          path: ai_analysis.md
          retention-days: 30

#  code-scanning:
#    name: Code Quality & Security Scanning
#    runs-on: ubuntu-latest
#    if: github.event.pull_request.draft == false
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          ref: ${{ github.event.pull_request.head.sha }}
#
#      - name: Setup Java
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Cache Maven dependencies
#        uses: actions/cache@v4
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Initialize CodeQL
#        id: codeql-init
#        uses: github/codeql-action/init@v3
#        with:
#          languages: java
#          queries: security-and-quality
#        continue-on-error: true
#
#      - name: Build project for analysis
#        id: build
#        run: |
#          mvn clean compile -DskipTests
#        continue-on-error: true
#
#      - name: Perform CodeQL Analysis
#        id: codeql-analyze
#        uses: github/codeql-action/analyze@v3
#        with:
#          category: "/language:java"
#        continue-on-error: true
#        if: steps.codeql-init.outcome == 'success'
#
#      - name: Run OWASP Dependency Check
#        id: owasp-check
#        uses: dependency-check/Dependency-Check_Action@main
#        with:
#          project: 'etn-test-cicd'
#          path: '.'
#          format: 'JSON'
#          args: >
#            --enableRetired
#            --enableExperimental
#            --failOnCVSS 7
#        continue-on-error: true
#
#      - name: Run SonarQube Quality Analysis
#        id: sonar-analysis
#        uses: sonarqube-quality-gate-action@v1.3.0
#        with:
#          scanMetadataReportFile: target/sonar/report-task.txt
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        continue-on-error: true
#
#      - name: Run SpotBugs Analysis
#        id: spotbugs-analysis
#        run: |
#          mvn compile spotbugs:spotbugs
#        continue-on-error: true
#
#      - name: Run PMD Analysis
#        id: pmd-analysis
#        run: |
#          mvn pmd:pmd pmd:cpd
#        continue-on-error: true
#
#      - name: Generate Quality Report
#        run: |
#          echo "## 📊 Code Quality & Security Report" > quality_report.md
#          echo "" >> quality_report.md
#
#          # CodeQL Results
#          echo "### 🔍 Security Analysis (CodeQL)" >> quality_report.md
#          if [ "${{ steps.codeql-analyze.outcome }}" == "success" ]; then
#            echo "- ✅ **CodeQL scan completed successfully**" >> quality_report.md
#            echo "- 📄 **Results:** See Security tab for detailed findings" >> quality_report.md
#          elif [ "${{ steps.codeql-init.outcome }}" == "failure" ]; then
#            echo "- ❌ **CodeQL initialization failed** - Check workflow logs" >> quality_report.md
#          elif [ "${{ steps.codeql-analyze.outcome }}" == "failure" ]; then
#            echo "- ⚠️ **CodeQL analysis failed** - Check build issues" >> quality_report.md
#          else
#            echo "- ⚠️ **CodeQL scan:** Skipped or incomplete" >> quality_report.md
#          fi
#          echo "" >> quality_report.md
#
#          # Dependency Check Results
#          echo "### 🛡️ Dependency Security (OWASP)" >> quality_report.md
#          if [ "${{ steps.owasp-check.outcome }}" == "success" ] && [ -f "reports/dependency-check-report.json" ]; then
#            vulnerabilities=$(jq '.dependencies | map(select(.vulnerabilities | length > 0)) | length' reports/dependency-check-report.json 2>/dev/null || echo "0")
#            total_deps=$(jq '.dependencies | length' reports/dependency-check-report.json 2>/dev/null || echo "N/A")
#            echo "- 📦 **Dependencies scanned:** $total_deps" >> quality_report.md
#            echo "- ⚠️ **Vulnerable dependencies:** $vulnerabilities" >> quality_report.md
#            if [ "$vulnerabilities" -gt 0 ]; then
#              echo "- 🚨 **Action required:** Review dependency vulnerabilities" >> quality_report.md
#            fi
#          elif [ "${{ steps.owasp-check.outcome }}" == "failure" ]; then
#            echo "- ❌ **OWASP scan failed** - Check configuration or connectivity" >> quality_report.md
#          else
#            echo "- ⚠️ **OWASP scan:** Report not available" >> quality_report.md
#          fi
#          echo "" >> quality_report.md
#
#          # PMD Results
#          echo "### 📏 Code Quality (PMD)" >> quality_report.md
#          if [ "${{ steps.pmd-analysis.outcome }}" == "success" ] && [ -f "target/pmd.xml" ]; then
#            violations=$(grep -c "<violation" target/pmd.xml 2>/dev/null || echo "0")
#            echo "- 📊 **PMD violations:** $violations" >> quality_report.md
#            if [ "$violations" -gt 0 ]; then
#              echo "- 📄 **Details:** Check PMD report in artifacts" >> quality_report.md
#            fi
#          elif [ "${{ steps.pmd-analysis.outcome }}" == "failure" ]; then
#            echo "- ❌ **PMD analysis failed** - Check build configuration" >> quality_report.md
#          else
#            echo "- ⚠️ **PMD analysis:** Report not generated" >> quality_report.md
#          fi
#          echo "" >> quality_report.md
#
#          # SpotBugs Results
#          echo "### 🐛 Bug Analysis (SpotBugs)" >> quality_report.md
#          if [ "${{ steps.spotbugs-analysis.outcome }}" == "success" ] && [ -f "target/spotbugsXml.xml" ]; then
#            bugs=$(grep -c "<BugInstance" target/spotbugsXml.xml 2>/dev/null || echo "0")
#            echo "- 🔍 **Potential bugs found:** $bugs" >> quality_report.md
#            if [ "$bugs" -gt 0 ]; then
#              echo "- 📄 **Details:** Check SpotBugs report in artifacts" >> quality_report.md
#            fi
#          elif [ "${{ steps.spotbugs-analysis.outcome }}" == "failure" ]; then
#            echo "- ❌ **SpotBugs analysis failed** - Check build dependencies" >> quality_report.md
#          else
#            echo "- ⚠️ **SpotBugs analysis:** Report not generated" >> quality_report.md
#          fi
#          echo "" >> quality_report.md
#
#          # Test Coverage
#          echo "### 🧪 Test Coverage Analysis" >> quality_report.md
#          if mvn jacoco:report 2>/dev/null; then
#            if [ -f "target/site/jacoco/index.html" ]; then
#              echo "- ✅ **Coverage report generated**" >> quality_report.md
#              echo "- 📊 **Report location:** Available in artifacts" >> quality_report.md
#              # Extract coverage percentage if possible
#              if command -v xmllint >/dev/null 2>&1 && [ -f "target/site/jacoco/jacoco.xml" ]; then
#                coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "N/A")
#                total=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "N/A")
#                if [ "$coverage" != "N/A" ] && [ "$total" != "N/A" ] && [ "$coverage" -gt 0 ] && [ "$total" -ge 0 ]; then
#                  percentage=$(awk "BEGIN {printf \"%.2f\", $coverage * 100 / ($coverage + $total)}" 2>/dev/null || echo "N/A")
#                  echo "- 📈 **Coverage:** ${percentage}%" >> quality_report.md
#                fi
#              fi
#            fi
#          else
#            echo "- ⚠️ **Coverage analysis:** Failed to generate report" >> quality_report.md
#          fi
#          echo "" >> quality_report.md
#
#          # Summary of scan results
#          echo "### 📋 Scan Summary" >> quality_report.md
#          echo "**Completed Scans:**" >> quality_report.md
#          [ "${{ steps.codeql-analyze.outcome }}" == "success" ] && echo "- ✅ CodeQL Security Analysis" >> quality_report.md || echo "- ❌ CodeQL Security Analysis" >> quality_report.md
#          [ "${{ steps.owasp-check.outcome }}" == "success" ] && echo "- ✅ OWASP Dependency Check" >> quality_report.md || echo "- ❌ OWASP Dependency Check" >> quality_report.md
#          [ "${{ steps.pmd-analysis.outcome }}" == "success" ] && echo "- ✅ PMD Code Quality" >> quality_report.md || echo "- ❌ PMD Code Quality" >> quality_report.md
#          [ "${{ steps.spotbugs-analysis.outcome }}" == "success" ] && echo "- ✅ SpotBugs Analysis" >> quality_report.md || echo "- ❌ SpotBugs Analysis" >> quality_report.md
#          [ "${{ steps.sonar-analysis.outcome }}" == "success" ] && echo "- ✅ SonarQube Analysis" >> quality_report.md || echo "- ❌ SonarQube Analysis" >> quality_report.md
#          echo "" >> quality_report.md
#          echo "*Note: Failed scans do not prevent workflow completion. Check individual scan logs for details.*" >> quality_report.md
#
#      - name: Upload Quality Reports
#        uses: actions/upload-artifact@v4
#        with:
#          name: quality-reports-${{ github.event.pull_request.number }}
#          path: |
#            quality_report.md
#            target/pmd.xml
#            target/spotbugsXml.xml
#            target/site/jacoco/
#            reports/dependency-check-report.*
#          retention-days: 30
#        if: always()

  pr-analysis:
    name: PR Analysis and Comments
    runs-on: ubuntu-latest
    needs: [code-review, code-scanning]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download Quality Reports
        uses: actions/download-artifact@v4
        with:
          name: quality-reports-${{ github.event.pull_request.number }}
          path: ./quality-reports/
        continue-on-error: true

      - name: Download Basic Analysis
        uses: actions/download-artifact@v4
        with:
          name: basic-analysis-${{ github.event.pull_request.number }}
          path: ./basic-analysis/
        continue-on-error: true

      - name: Analyze changes
        id: analyze
        run: |
          echo "## 📊 Pull Request Analysis" > pr_analysis.md
          echo "" >> pr_analysis.md

          # Get PR info
          echo "**Branch:** \`${{ github.event.pull_request.head.ref }}\` → \`${{ github.event.pull_request.base.ref }}\`" >> pr_analysis.md
          echo "**Author:** @${{ github.event.pull_request.user.login }}" >> pr_analysis.md
          echo "**Commits:** ${{ github.event.pull_request.commits }}" >> pr_analysis.md
          echo "" >> pr_analysis.md

          # Add Basic Analysis
          if [ -f "./basic-analysis/ai_analysis.md" ]; then
            echo "### 🤖 Basic Code Analysis" >> pr_analysis.md
            echo "*(Detailed analysis available in job artifacts)*" >> pr_analysis.md
            echo "" >> pr_analysis.md
            cat ./basic-analysis/ai_analysis.md | tail -n +3 >> pr_analysis.md
            echo "" >> pr_analysis.md
          else
            echo "### 🤖 Basic Code Analysis" >> pr_analysis.md
            echo "- ⚠️ **Basic analysis:** Not available - check analysis job logs" >> pr_analysis.md
            echo "" >> pr_analysis.md
          fi

          # Add Quality Report
          if [ -f "./quality-reports/quality_report.md" ]; then
            echo "### 📊 Code Quality & Security Summary" >> pr_analysis.md
            echo "*(Full quality report available in job artifacts)*" >> pr_analysis.md
            echo "" >> pr_analysis.md
            cat ./quality-reports/quality_report.md | tail -n +3 >> pr_analysis.md
          else
            echo "### 📊 Code Quality & Security Summary" >> pr_analysis.md
            echo "- ⚠️ **Quality report:** Not available - check scanning job logs" >> pr_analysis.md
            echo "" >> pr_analysis.md
          fi

          # Analyze file changes
          echo "### 📁 Files Changed" >> pr_analysis.md
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt

          java_files=$(grep -E '\.(java)$' changed_files.txt | wc -l)
          xml_files=$(grep -E '\.(xml)$' changed_files.txt | wc -l)
          yaml_files=$(grep -E '\.(yaml|yml)$' changed_files.txt | wc -l)
          prop_files=$(grep -E '\.(properties)$' changed_files.txt | wc -l)

          echo "- **Java files:** $java_files" >> pr_analysis.md
          echo "- **XML files:** $xml_files" >> pr_analysis.md
          echo "- **YAML files:** $yaml_files" >> pr_analysis.md
          echo "- **Properties files:** $prop_files" >> pr_analysis.md
          echo "" >> pr_analysis.md

          # Check for specific patterns
          echo "### 🔍 Code Review Checklist" >> pr_analysis.md

          # Check for new dependencies
          if git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- pom.xml | grep -q "^+.*<dependency>"; then
            echo "- ⚠️ **New dependencies added** - Please review for security and necessity" >> pr_analysis.md
          fi

          # Check for database changes
          if grep -qE "(schema|migration|flyway|liquibase)" changed_files.txt; then
            echo "- 🗄️ **Database changes detected** - Ensure backward compatibility" >> pr_analysis.md
          fi

          # Check for configuration changes
          if grep -qE "(application\.(yml|yaml|properties)|logback)" changed_files.txt; then
            echo "- ⚙️ **Configuration changes detected** - Verify environment-specific settings" >> pr_analysis.md
          fi

          # Check for security-related files
          if grep -qE "(security|auth|token|password|key)" changed_files.txt; then
            echo "- 🔐 **Security-related changes detected** - Extra scrutiny required" >> pr_analysis.md
          fi

          # Check for workflow changes
          if grep -qE "\.github/workflows" changed_files.txt; then
            echo "- 🔄 **Workflow changes detected** - Test CI/CD pipeline changes carefully" >> pr_analysis.md
          fi

          echo "" >> pr_analysis.md

      - name: Run tests and collect metrics
        id: test-metrics
        run: |
          echo "### 🧪 Test & Build Information" >> pr_analysis.md

          # Analyze file changes for test metrics
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt

          # Run Maven test to get coverage info
          if mvn clean test -q; then
            echo "- ✅ **Tests Status:** All tests passing" >> pr_analysis.md

            # Check if there are test files in the changes
            if grep -qE "Test\.java$" changed_files.txt; then
              echo "- 🧪 **Test changes detected** - New or modified tests included" >> pr_analysis.md
            else
              echo "- ⚠️ **No test changes detected** - Consider adding tests for new functionality" >> pr_analysis.md
            fi
          else
            echo "- ❌ **Tests Status:** Some tests are failing" >> pr_analysis.md
          fi

          # Check code complexity (simple line count as proxy)
          total_lines_added=$(git diff --numstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | awk '{sum+=$1} END {print sum}')
          total_lines_removed=$(git diff --numstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | awk '{sum+=$2} END {print sum}')

          echo "- 📏 **Lines added:** ${total_lines_added:-0}" >> pr_analysis.md
          echo "- 📏 **Lines removed:** ${total_lines_removed:-0}" >> pr_analysis.md

          if [ "${total_lines_added:-0}" -gt 500 ]; then
            echo "- ⚠️ **Large PR detected** - Consider breaking into smaller PRs" >> pr_analysis.md
          fi

          echo "" >> pr_analysis.md

      - name: Generate review guidelines
        run: |
          echo "### 📋 Review Guidelines" >> pr_analysis.md
          echo "" >> pr_analysis.md
          echo "**For Reviewers:**" >> pr_analysis.md
          echo "- [ ] Review basic code analysis suggestions above" >> pr_analysis.md
          echo "- [ ] Check Security tab for CodeQL findings" >> pr_analysis.md
          echo "- [ ] Review quality reports in job artifacts" >> pr_analysis.md
          echo "- [ ] Verify test coverage is adequate" >> pr_analysis.md
          echo "- [ ] Address any security vulnerabilities found" >> pr_analysis.md
          echo "- [ ] Code follows project coding standards" >> pr_analysis.md
          echo "- [ ] Adequate test coverage for new functionality" >> pr_analysis.md
          echo "- [ ] No hardcoded secrets or sensitive information" >> pr_analysis.md
          echo "- [ ] Error handling is appropriate" >> pr_analysis.md
          echo "- [ ] Documentation updated if needed" >> pr_analysis.md
          echo "- [ ] Performance impact considered" >> pr_analysis.md
          echo "- [ ] Breaking changes documented" >> pr_analysis.md
          echo "" >> pr_analysis.md

          echo "**Quality & Security Integration:**" >> pr_analysis.md
          echo "- CodeQL security analysis completed automatically" >> pr_analysis.md
          echo "- OWASP dependency scanning for vulnerability detection" >> pr_analysis.md
          echo "- PMD and SpotBugs analysis for code quality" >> pr_analysis.md
          echo "- JaCoCo test coverage reporting" >> pr_analysis.md
          echo "- All reports available in workflow artifacts" >> pr_analysis.md
          echo "" >> pr_analysis.md

          echo "**Testing Recommendations:**" >> pr_analysis.md
          echo "- Verify functionality in development environment" >> pr_analysis.md
          echo "- Test edge cases and error scenarios" >> pr_analysis.md
          echo "- Validate configuration changes" >> pr_analysis.md
          echo "- Run security tests if applicable" >> pr_analysis.md
          echo "" >> pr_analysis.md

          echo "---" >> pr_analysis.md
          echo "*Generated by GitHub Actions with comprehensive quality analysis on $(date)*" >> pr_analysis.md

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysisContent = fs.readFileSync('pr_analysis.md', 'utf8');

            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 Pull Request Analysis')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: analysisContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: analysisContent
              });
            }

      - name: Upload analysis artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-analysis-${{ github.event.pull_request.number }}
          path: |
            pr_analysis.md
            changed_files.txt
          retention-days: 30
