name: Handle Pre-PR Events

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - develop
      - 'release/**'

permissions:
  contents: read
  pull-requests: write
  checks: read
  issues: write
  security-events: write
  actions: read

jobs:
  code-review:
    name: Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Basic Code Analysis
        run: |
          echo "## 🤖 Basic Code Analysis" > ai_analysis.md
          echo "" >> ai_analysis.md
          
          # Analyze file changes
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
          
          echo "### 📁 Changed Files Analysis" >> ai_analysis.md
          java_files=$(grep -E '\.(java)$' changed_files.txt | wc -l)
          xml_files=$(grep -E '\.(xml)$' changed_files.txt | wc -l)
          yaml_files=$(grep -E '\.(yaml|yml)$' changed_files.txt | wc -l)
          prop_files=$(grep -E '\.(properties)$' changed_files.txt | wc -l)
          
          echo "- **Java files changed:** $java_files" >> ai_analysis.md
          echo "- **XML files changed:** $xml_files" >> ai_analysis.md
          echo "- **YAML files changed:** $yaml_files" >> ai_analysis.md
          echo "- **Properties files changed:** $prop_files" >> ai_analysis.md
          echo "" >> ai_analysis.md
          
          # Check for Spring Boot specific patterns
          echo "### 🍃 Spring Boot Pattern Analysis" >> ai_analysis.md
          if grep -qE "(Controller|Service|Repository|Component|Entity)" changed_files.txt 2>/dev/null; then
            echo "- ✅ **Spring annotations detected** - Review for proper usage" >> ai_analysis.md
          fi
          
          if grep -qE "application\.(yml|yaml|properties)" changed_files.txt 2>/dev/null; then
            echo "- ⚙️ **Configuration changes detected** - Verify settings" >> ai_analysis.md
          fi
          
          if grep -qE "pom\.xml" changed_files.txt 2>/dev/null; then
            echo "- 📦 **Maven configuration changed** - Review dependencies" >> ai_analysis.md
          fi
          echo "" >> ai_analysis.md
          
          echo "### 📋 Manual Review Recommendations" >> ai_analysis.md
          echo "- Review code for Spring Boot best practices" >> ai_analysis.md
          echo "- Check security configurations" >> ai_analysis.md
          echo "- Validate error handling patterns" >> ai_analysis.md
          echo "- Ensure proper logging implementation" >> ai_analysis.md
          echo "- Verify test coverage for new functionality" >> ai_analysis.md

      - name: Upload Basic Analysis
        uses: actions/upload-artifact@v4
        with:
          name: basic-analysis-${{ github.event.pull_request.number }}
          path: ai_analysis.md
          retention-days: 30

  code-scanning:
    name: Code Quality & Security Scanning
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build project for analysis
        id: build
        run: |
          mvn clean compile -DskipTests

      - name: Run SpotBugs Analysis
        id: spotbugs-analysis
        run: |
          # Check if SpotBugs plugin exists in pom.xml
          if ! grep -q "spotbugs-maven-plugin" pom.xml; then
            echo "SpotBugs plugin not found in pom.xml, adding it temporarily..."
            
            # Create backup of original pom.xml
            cp pom.xml pom.xml.backup
            
            # Check if <build><plugins> section exists
            if grep -q "<build>" pom.xml && grep -q "<plugins>" pom.xml; then
              # Add SpotBugs plugin to existing plugins section
              sed -i '/<\/plugins>/i\
                        <plugin>\
                            <groupId>com.github.spotbugs</groupId>\
                            <artifactId>spotbugs-maven-plugin</artifactId>\
                            <version>4.8.6.4</version>\
                            <configuration>\
                                <effort>Max</effort>\
                                <threshold>Low</threshold>\
                                <xmlOutput>true</xmlOutput>\
                                <failOnError>false</failOnError>\
                            </configuration>\
                        </plugin>' pom.xml
            else
              # Add complete build section with SpotBugs plugin
              sed -i '/<\/dependencies>/a\
          \
           <build>\
            <plugins>\
            <plugin>\
                <groupId>com.github.spotbugs</groupId>\
                <artifactId>spotbugs-maven-plugin</artifactId>\
                <version>4.8.6.4</version>\
                <configuration>\
                    <effort>Max</effort>\
                    <threshold>Low</threshold>\
                    <xmlOutput>true</xmlOutput>\
                    <failOnError>false</failOnError>\
                </configuration>\
              </plugin>\
            </plugins>\
                </build>' pom.xml
            fi
            
            echo "SpotBugs plugin added temporarily to pom.xml"
            cat pom.xml
          else
            echo "SpotBugs plugin already exists in pom.xml"
          fi
          
          # Run SpotBugs analysis
          echo "Running SpotBugs analysis..."
          mvn compile spotbugs:spotbugs || echo "SpotBugs analysis completed with warnings/errors"
          
          # Restore original pom.xml if we modified it
          if [ -f "pom.xml.backup" ]; then
            echo "Restoring original pom.xml..."
            mv pom.xml.backup pom.xml
          fi
        continue-on-error: true

      - name: Run PMD Analysis
        id: pmd-analysis
        run: |
          mvn pmd:pmd pmd:cpd
        continue-on-error: true

      - name: Run JaCoCo Code Coverage
        id: jacoco-coverage
        run: |
          echo "Running JaCoCo code coverage analysis..."
          
          # Check if JaCoCo plugin exists in pom.xml
          if ! grep -q "jacoco-maven-plugin" pom.xml; then
            echo "JaCoCo plugin not found in pom.xml, adding it temporarily..."
            
            # Create backup of original pom.xml
            cp pom.xml pom.xml.jacoco.backup
            
            # Check if <build><plugins> section exists
            if grep -q "<build>" pom.xml && grep -q "<plugins>" pom.xml; then
              # Add JaCoCo plugin to existing plugins section
              sed -i '/<\/plugins>/i\
                        <plugin>\
                            <groupId>org.jacoco</groupId>\
                            <artifactId>jacoco-maven-plugin</artifactId>\
                            <version>0.8.12</version>\
                            <executions>\
                                <execution>\
                                    <goals>\
                                        <goal>prepare-agent</goal>\
                                    </goals>\
                                </execution>\
                                <execution>\
                                    <id>report</id>\
                                    <phase>test</phase>\
                                    <goals>\
                                        <goal>report</goal>\
                                    </goals>\
                                </execution>\
                            </executions>\
                        </plugin>' pom.xml
            else
              # Add complete build section with JaCoCo plugin
              sed -i '/<\/dependencies>/a\
            \
            <build>\
                <plugins>\
                    <plugin>\
                        <groupId>org.jacoco</groupId>\
                        <artifactId>jacoco-maven-plugin</artifactId>\
                        <version>0.8.12</version>\
                        <executions>\
                            <execution>\
                                <goals>\
                                    <goal>prepare-agent</goal>\
                                </goals>\
                            </execution>\
                            <execution>\
                                <id>report</id>\
                                <phase>test</phase>\
                                <goals>\
                                    <goal>report</goal>\
                                </goals>\
                            </execution>\
                        </executions>\
                    </plugin>\
                </plugins>\
            </build>' pom.xml
            fi
            
            echo "JaCoCo plugin added temporarily to pom.xml"
          else
            echo "JaCoCo plugin already exists in pom.xml"
          fi
          
          # First run tests to generate coverage data
          echo "Executing tests to generate coverage data..."
          mvn clean test -Dmaven.test.failure.ignore=true || echo "Tests completed with some failures"
          
          # Generate JaCoCo reports
          echo "Generating JaCoCo coverage reports..."
          mvn jacoco:report || echo "JaCoCo report generation completed with warnings"
          
          # Verify report generation
          if [ -f "target/site/jacoco/index.html" ]; then
            echo "✅ JaCoCo HTML report generated successfully"
          else
            echo "❌ JaCoCo HTML report not found"
          fi
          
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "✅ JaCoCo XML report generated successfully"
          else
            echo "❌ JaCoCo XML report not found"
          fi
          
          # List generated files for debugging
          echo "Generated JaCoCo files:"
          find target/site/jacoco -name "*.html" -o -name "*.xml" 2>/dev/null || echo "No JaCoCo files found"
          
          # Restore original pom.xml if we modified it
          if [ -f "pom.xml.jacoco.backup" ]; then
            echo "Restoring original pom.xml..."
            mv pom.xml.jacoco.backup pom.xml
          fi
        continue-on-error: true

      - name: Generate JaCoCo Coverage Report
        id: jacoco-analysis
        run: |
          echo "Creating comprehensive JaCoCo coverage report..."
          
          # Create detailed coverage summary
          echo "# 🧪 JaCoCo Test Coverage Report" > jacoco_summary.md
          echo "" >> jacoco_summary.md
          echo "Generated on: $(date)" >> jacoco_summary.md
          echo "" >> jacoco_summary.md
          
          if [ -f "target/site/jacoco/index.html" ]; then
            echo "## ✅ Coverage Report Status" >> jacoco_summary.md
            echo "- **Status:** Successfully generated" >> jacoco_summary.md
            echo "- **Report Location:** target/site/jacoco/index.html" >> jacoco_summary.md
            echo "- **XML Report:** target/site/jacoco/jacoco.xml" >> jacoco_summary.md
            echo "" >> jacoco_summary.md
            
            # Extract detailed coverage metrics if XML exists
            if command -v xmllint >/dev/null 2>&1 && [ -f "target/site/jacoco/jacoco.xml" ]; then
              echo "## 📊 Coverage Metrics" >> jacoco_summary.md
              echo "" >> jacoco_summary.md
              
              # Instruction Coverage
              coverage=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              missed=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              
              if [ "$coverage" != "0" ] || [ "$missed" != "0" ]; then
                total=$((coverage + missed))
                if [ $total -gt 0 ]; then
                  percentage=$(awk "BEGIN {printf \"%.2f\", $coverage * 100 / $total}" 2>/dev/null || echo "0.00")
                  echo "### 📈 Instruction Coverage" >> jacoco_summary.md
                  echo "- **Covered:** $coverage instructions" >> jacoco_summary.md
                  echo "- **Missed:** $missed instructions" >> jacoco_summary.md
                  echo "- **Total:** $total instructions" >> jacoco_summary.md
                  echo "- **Percentage:** ${percentage}%" >> jacoco_summary.md
                  echo "" >> jacoco_summary.md
                fi
              fi
              
              # Line Coverage
              line_covered=$(xmllint --xpath "string(//report/counter[@type='LINE']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              line_missed=$(xmllint --xpath "string(//report/counter[@type='LINE']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              
              if [ "$line_covered" != "0" ] || [ "$line_missed" != "0" ]; then
                line_total=$((line_covered + line_missed))
                if [ $line_total -gt 0 ]; then
                  line_percentage=$(awk "BEGIN {printf \"%.2f\", $line_covered * 100 / $line_total}" 2>/dev/null || echo "0.00")
                  echo "### 📊 Line Coverage" >> jacoco_summary.md
                  echo "- **Covered:** $line_covered lines" >> jacoco_summary.md
                  echo "- **Missed:** $line_missed lines" >> jacoco_summary.md
                  echo "- **Total:** $line_total lines" >> jacoco_summary.md
                  echo "- **Percentage:** ${line_percentage}%" >> jacoco_summary.md
                  echo "" >> jacoco_summary.md
                fi
              fi
              
              # Branch Coverage
              branch_covered=$(xmllint --xpath "string(//report/counter[@type='BRANCH']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              branch_missed=$(xmllint --xpath "string(//report/counter[@type='BRANCH']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              
              if [ "$branch_covered" != "0" ] || [ "$branch_missed" != "0" ]; then
                branch_total=$((branch_covered + branch_missed))
                if [ $branch_total -gt 0 ]; then
                  branch_percentage=$(awk "BEGIN {printf \"%.2f\", $branch_covered * 100 / $branch_total}" 2>/dev/null || echo "0.00")
                  echo "### 🌿 Branch Coverage" >> jacoco_summary.md
                  echo "- **Covered:** $branch_covered branches" >> jacoco_summary.md
                  echo "- **Missed:** $branch_missed branches" >> jacoco_summary.md
                  echo "- **Total:** $branch_total branches" >> jacoco_summary.md
                  echo "- **Percentage:** ${branch_percentage}%" >> jacoco_summary.md
                  echo "" >> jacoco_summary.md
                fi
              fi
              
              # Method Coverage
              method_covered=$(xmllint --xpath "string(//report/counter[@type='METHOD']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              method_missed=$(xmllint --xpath "string(//report/counter[@type='METHOD']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              
              if [ "$method_covered" != "0" ] || [ "$method_missed" != "0" ]; then
                method_total=$((method_covered + method_missed))
                if [ $method_total -gt 0 ]; then
                  method_percentage=$(awk "BEGIN {printf \"%.2f\", $method_covered * 100 / $method_total}" 2>/dev/null || echo "0.00")
                  echo "### 🔧 Method Coverage" >> jacoco_summary.md
                  echo "- **Covered:** $method_covered methods" >> jacoco_summary.md
                  echo "- **Missed:** $method_missed methods" >> jacoco_summary.md
                  echo "- **Total:** $method_total methods" >> jacoco_summary.md
                  echo "- **Percentage:** ${method_percentage}%" >> jacoco_summary.md
                  echo "" >> jacoco_summary.md
                fi
              fi
              
              # Class Coverage
              class_covered=$(xmllint --xpath "string(//report/counter[@type='CLASS']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              class_missed=$(xmllint --xpath "string(//report/counter[@type='CLASS']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
              
              if [ "$class_covered" != "0" ] || [ "$class_missed" != "0" ]; then
                class_total=$((class_covered + class_missed))
                if [ $class_total -gt 0 ]; then
                  class_percentage=$(awk "BEGIN {printf \"%.2f\", $class_covered * 100 / $class_total}" 2>/dev/null || echo "0.00")
                  echo "### 🏛️ Class Coverage" >> jacoco_summary.md
                  echo "- **Covered:** $class_covered classes" >> jacoco_summary.md
                  echo "- **Missed:** $class_missed classes" >> jacoco_summary.md
                  echo "- **Total:** $class_total classes" >> jacoco_summary.md
                  echo "- **Percentage:** ${class_percentage}%" >> jacoco_summary.md
                  echo "" >> jacoco_summary.md
                fi
              fi
              
              # Coverage Recommendations
              echo "## 📋 Coverage Analysis" >> jacoco_summary.md
              echo "" >> jacoco_summary.md
              
              # Determine overall coverage quality
              if [ "$coverage" != "0" ] && [ "$missed" != "0" ]; then
                total_coverage=$((coverage + missed))
                if [ $total_coverage -gt 0 ]; then
                  overall_percentage=$(awk "BEGIN {printf \"%.0f\", $coverage * 100 / $total_coverage}" 2>/dev/null || echo "0")
                  
                  if [ $overall_percentage -ge 80 ]; then
                    echo "✅ **Coverage Quality:** Excellent (${overall_percentage}%)" >> jacoco_summary.md
                    echo "- Coverage meets high quality standards" >> jacoco_summary.md
                  elif [ $overall_percentage -ge 70 ]; then
                    echo "🟡 **Coverage Quality:** Good (${overall_percentage}%)" >> jacoco_summary.md
                    echo "- Coverage is acceptable but could be improved" >> jacoco_summary.md
                  elif [ $overall_percentage -ge 50 ]; then
                    echo "🟠 **Coverage Quality:** Fair (${overall_percentage}%)" >> jacoco_summary.md
                    echo "- Coverage needs improvement for better quality" >> jacoco_summary.md
                  else
                    echo "🔴 **Coverage Quality:** Poor (${overall_percentage}%)" >> jacoco_summary.md
                    echo "- Coverage is significantly below recommended levels" >> jacoco_summary.md
                  fi
                fi
              fi
              
              echo "" >> jacoco_summary.md
              echo "### 🎯 Recommendations" >> jacoco_summary.md
              echo "- Add unit tests for uncovered methods and classes" >> jacoco_summary.md
              echo "- Focus on testing edge cases and error conditions" >> jacoco_summary.md
              echo "- Ensure all business logic paths are tested" >> jacoco_summary.md
              echo "- Consider integration tests for complex workflows" >> jacoco_summary.md
              
            else
              echo "## ⚠️ Coverage Metrics" >> jacoco_summary.md
              echo "- Unable to parse detailed coverage metrics" >> jacoco_summary.md
              echo "- XML report may be missing or malformed" >> jacoco_summary.md
              echo "- Check HTML report for visual coverage details" >> jacoco_summary.md
            fi
          else
            echo "## ❌ Coverage Report Status" >> jacoco_summary.md
            echo "- **Status:** Failed to generate coverage report" >> jacoco_summary.md
            echo "- **Possible causes:**" >> jacoco_summary.md
            echo "  - No tests were executed" >> jacoco_summary.md
            echo "  - JaCoCo plugin not configured properly" >> jacoco_summary.md
            echo "  - Build compilation failed" >> jacoco_summary.md
            echo "- **Recommendation:** Check test execution logs" >> jacoco_summary.md
          fi
          
          echo "" >> jacoco_summary.md
          echo "---" >> jacoco_summary.md
          echo "*For detailed coverage analysis, download the artifacts and open the HTML report*" >> jacoco_summary.md
        continue-on-error: true

      - name: Generate Quality Report
        run: |
          echo "## 📊 Code Quality & Security Report" > quality_report.md
          echo "" >> quality_report.md

          # PMD Results
          echo "### 📏 Code Quality (PMD)" >> quality_report.md
          if [ "${{ steps.pmd-analysis.outcome }}" == "success" ] && [ -f "target/pmd.xml" ]; then
            violations=$(grep -c "<violation" target/pmd.xml 2>/dev/null || echo "0")
            echo "- 📊 **PMD violations:** $violations" >> quality_report.md
            if [ "$violations" -gt 0 ]; then
              echo "- 📄 **Details:** Check PMD report in artifacts" >> quality_report.md
            fi
          elif [ "${{ steps.pmd-analysis.outcome }}" == "failure" ]; then
            echo "- ❌ **PMD analysis failed** - Check build configuration" >> quality_report.md
          else
            echo "- ⚠️ **PMD analysis:** Report not generated" >> quality_report.md
          fi
          echo "" >> quality_report.md

          # SpotBugs Results
          echo "### 🐛 Bug Analysis (SpotBugs)" >> quality_report.md
          if [ "${{ steps.spotbugs-analysis.outcome }}" == "success" ] && [ -f "target/spotbugsXml.xml" ]; then
            bugs=$(grep -c "<BugInstance" target/spotbugsXml.xml 2>/dev/null || echo "0")
            echo "- 🔍 **Potential bugs found:** $bugs" >> quality_report.md
            if [ "$bugs" -gt 0 ]; then
              echo "- 📄 **Details:** Check SpotBugs report in artifacts" >> quality_report.md
            fi
          elif [ "${{ steps.spotbugs-analysis.outcome }}" == "failure" ]; then
            echo "- ❌ **SpotBugs analysis failed** - Check build dependencies" >> quality_report.md
          else
            echo "- ⚠️ **SpotBugs analysis:** Report not generated" >> quality_report.md
          fi
          echo "" >> quality_report.md

          # Test Coverage Results (reference to separate step)
          echo "### 🧪 Test Coverage Analysis" >> quality_report.md
          if [ "${{ steps.jacoco-analysis.outcome }}" == "success" ] && [ -f "jacoco_summary.md" ]; then
            echo "- ✅ **Coverage analysis completed**" >> quality_report.md
            echo "- 📊 **Summary:** See coverage details below" >> quality_report.md
            echo "- 📄 **Full report:** Available in artifacts" >> quality_report.md
          elif [ "${{ steps.jacoco-analysis.outcome }}" == "failure" ]; then
            echo "- ❌ **Coverage analysis failed** - Check test execution" >> quality_report.md
          else
            echo "- ⚠️ **Coverage analysis:** Not completed" >> quality_report.md
          fi
          echo "" >> quality_report.md

          # Summary of scan results
          echo "### 📋 Scan Summary" >> quality_report.md
          echo "**Completed Scans:**" >> quality_report.md
          [ "${{ steps.pmd-analysis.outcome }}" == "success" ] && echo "- ✅ PMD Code Quality" >> quality_report.md || echo "- ❌ PMD Code Quality" >> quality_report.md
          [ "${{ steps.spotbugs-analysis.outcome }}" == "success" ] && echo "- ✅ SpotBugs Analysis" >> quality_report.md || echo "- ❌ SpotBugs Analysis" >> quality_report.md
          [ "${{ steps.jacoco-analysis.outcome }}" == "success" ] && echo "- ✅ JaCoCo Coverage Analysis" >> quality_report.md || echo "- ❌ JaCoCo Coverage Analysis" >> quality_report.md
          echo "" >> quality_report.md
          echo "*Note: Failed scans do not prevent workflow completion. Check individual scan logs for details.*" >> quality_report.md

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ github.event.pull_request.number }}
          path: |
            quality_report.md
            jacoco_summary.md
            target/pmd.xml
            target/spotbugsXml.xml
            target/site/jacoco/
            reports/dependency-check-report.*
          retention-days: 30
        if: always()

  pr-analysis:
    name: PR Analysis and Comments
    runs-on: ubuntu-latest
    needs: [code-review, code-scanning]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Download Quality Reports
        uses: actions/download-artifact@v4
        with:
          name: quality-reports-${{ github.event.pull_request.number }}
          path: ./quality-reports/
        continue-on-error: true

      - name: Download Basic Analysis
        uses: actions/download-artifact@v4
        with:
          name: basic-analysis-${{ github.event.pull_request.number }}
          path: ./basic-analysis/
        continue-on-error: true

      - name: Analyze changes
        id: analyze
        run: |
          echo "## 📊 Pull Request Analysis" > pr_analysis.md
          echo "" >> pr_analysis.md

          # Get PR info
          echo "**Branch:** \`${{ github.event.pull_request.head.ref }}\` → \`${{ github.event.pull_request.base.ref }}\`" >> pr_analysis.md
          echo "**Author:** @${{ github.event.pull_request.user.login }}" >> pr_analysis.md
          echo "**Commits:** ${{ github.event.pull_request.commits }}" >> pr_analysis.md
          echo "" >> pr_analysis.md

          # Add Basic Analysis
          if [ -f "./basic-analysis/ai_analysis.md" ]; then
            echo "### 🤖 Basic Code Analysis" >> pr_analysis.md
            echo "*(Detailed analysis available in job artifacts)*" >> pr_analysis.md
            echo "" >> pr_analysis.md
            cat ./basic-analysis/ai_analysis.md | tail -n +3 >> pr_analysis.md
            echo "" >> pr_analysis.md
          else
            echo "### 🤖 Basic Code Analysis" >> pr_analysis.md
            echo "- ⚠️ **Basic analysis:** Not available - check analysis job logs" >> pr_analysis.md
            echo "" >> pr_analysis.md
          fi

          # Add Quality Report
          if [ -f "./quality-reports/quality_report.md" ]; then
            echo "### 📊 Code Quality & Security Summary" >> pr_analysis.md
            echo "*(Full quality report available in job artifacts)*" >> pr_analysis.md
            echo "" >> pr_analysis.md
            cat ./quality-reports/quality_report.md | tail -n +3 >> pr_analysis.md
          else
            echo "### 📊 Code Quality & Security Summary" >> pr_analysis.md
            echo "- ⚠️ **Quality report:** Not available - check scanning job logs" >> pr_analysis.md
            echo "" >> pr_analysis.md
          fi

          # Analyze file changes
          echo "### 📁 Files Changed" >> pr_analysis.md
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt

          java_files=$(grep -E '\.(java)$' changed_files.txt | wc -l)
          xml_files=$(grep -E '\.(xml)$' changed_files.txt | wc -l)
          yaml_files=$(grep -E '\.(yaml|yml)$' changed_files.txt | wc -l)
          prop_files=$(grep -E '\.(properties)$' changed_files.txt | wc -l)

          echo "- **Java files:** $java_files" >> pr_analysis.md
          echo "- **XML files:** $xml_files" >> pr_analysis.md
          echo "- **YAML files:** $yaml_files" >> pr_analysis.md
          echo "- **Properties files:** $prop_files" >> pr_analysis.md
          echo "" >> pr_analysis.md

          # Check for specific patterns
          echo "### 🔍 Code Review Checklist" >> pr_analysis.md

          # Check for new dependencies
          if git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- pom.xml | grep -q "^+.*<dependency>"; then
            echo "- ⚠️ **New dependencies added** - Please review for security and necessity" >> pr_analysis.md
          fi

          # Check for database changes
          if grep -qE "(schema|migration|flyway|liquibase)" changed_files.txt; then
            echo "- 🗄️ **Database changes detected** - Ensure backward compatibility" >> pr_analysis.md
          fi

          # Check for configuration changes
          if grep -qE "(application\.(yml|yaml|properties)|logback)" changed_files.txt; then
            echo "- ⚙️ **Configuration changes detected** - Verify environment-specific settings" >> pr_analysis.md
          fi

          # Check for security-related files
          if grep -qE "(security|auth|token|password|key)" changed_files.txt; then
            echo "- 🔐 **Security-related changes detected** - Extra scrutiny required" >> pr_analysis.md
          fi

          # Check for workflow changes
          if grep -qE "\.github/workflows" changed_files.txt; then
            echo "- 🔄 **Workflow changes detected** - Test CI/CD pipeline changes carefully" >> pr_analysis.md
          fi

          echo "" >> pr_analysis.md

      - name: Run tests and collect metrics
        id: test-metrics
        run: |
          echo "### 🧪 Test & Build Information" >> pr_analysis.md

          # Analyze file changes for test metrics
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt

          # Run Maven test to get coverage info
          if mvn clean test -q; then
            echo "- ✅ **Tests Status:** All tests passing" >> pr_analysis.md

            # Check if there are test files in the changes
            if grep -qE "Test\.java$" changed_files.txt; then
              echo "- 🧪 **Test changes detected** - New or modified tests included" >> pr_analysis.md
            else
              echo "- ⚠️ **No test changes detected** - Consider adding tests for new functionality" >> pr_analysis.md
            fi
          else
            echo "- ❌ **Tests Status:** Some tests are failing" >> pr_analysis.md
          fi

          # Check code complexity (simple line count as proxy)
          total_lines_added=$(git diff --numstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | awk '{sum+=$1} END {print sum}')
          total_lines_removed=$(git diff --numstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | awk '{sum+=$2} END {print sum}')

          echo "- 📏 **Lines added:** ${total_lines_added:-0}" >> pr_analysis.md
          echo "- 📏 **Lines removed:** ${total_lines_removed:-0}" >> pr_analysis.md

          if [ "${total_lines_added:-0}" -gt 500 ]; then
            echo "- ⚠️ **Large PR detected** - Consider breaking into smaller PRs" >> pr_analysis.md
          fi

          echo "" >> pr_analysis.md

      - name: Generate review guidelines
        run: |
          echo "### 📋 Review Guidelines" >> pr_analysis.md
          echo "" >> pr_analysis.md
          echo "**For Reviewers:**" >> pr_analysis.md
          echo "- [ ] Review basic code analysis suggestions above" >> pr_analysis.md
          echo "- [ ] Review quality reports in job artifacts" >> pr_analysis.md
          echo "- [ ] Verify test coverage is adequate" >> pr_analysis.md
          echo "- [ ] Code follows project coding standards" >> pr_analysis.md
          echo "- [ ] Adequate test coverage for new functionality" >> pr_analysis.md
          echo "- [ ] No hardcoded secrets or sensitive information" >> pr_analysis.md
          echo "- [ ] Error handling is appropriate" >> pr_analysis.md
          echo "- [ ] Documentation updated if needed" >> pr_analysis.md
          echo "- [ ] Performance impact considered" >> pr_analysis.md
          echo "- [ ] Breaking changes documented" >> pr_analysis.md
          echo "" >> pr_analysis.md

          echo "**Quality & Security Integration:**" >> pr_analysis.md
          echo "- PMD and SpotBugs analysis for code quality" >> pr_analysis.md
          echo "- JaCoCo test coverage reporting" >> pr_analysis.md
          echo "- All reports available in workflow artifacts" >> pr_analysis.md
          echo "" >> pr_analysis.md

          echo "**Testing Recommendations:**" >> pr_analysis.md
          echo "- Verify functionality in development environment" >> pr_analysis.md
          echo "- Test edge cases and error scenarios" >> pr_analysis.md
          echo "- Validate configuration changes" >> pr_analysis.md
          echo "- Run security tests if applicable" >> pr_analysis.md
          echo "" >> pr_analysis.md

          echo "---" >> pr_analysis.md
          echo "*Generated by GitHub Actions with comprehensive quality analysis on $(date)*" >> pr_analysis.md

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysisContent = fs.readFileSync('pr_analysis.md', 'utf8');

            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 Pull Request Analysis')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: analysisContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: analysisContent
              });
            }

      - name: Upload analysis artifact
        uses: actions/upload-artifact@v4
        with:
          name: pr-analysis-${{ github.event.pull_request.number }}
          path: |
            pr_analysis.md
            changed_files.txt
          retention-days: 30
