name: Docker Build and Push

on:
  workflow_call:
    inputs:
      registry:
        description: 'Container registry to push to'
        required: false
        type: string
        default: 'ghcr.io'
      image_project:
        description: 'Project or namespace for the Docker image'
        required: false
        type: string
        default: ${{ github.repository_owner }}
      image_name:
        description: 'Name of the Docker image'
        required: true
        type: string
      image_tag:
        description: 'Tag for the Docker image'
        required: false
        type: string
        default: 'latest'
      dockerfile_path:
        description: 'Path to the Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      artifact_name:
        description: 'Name of the artifact to download'
        required: false
        type: string
        default: 'build-artifacts'
      artifact_destination:
        description: 'Destination path for downloaded artifacts'
        required: false
        type: string
        default: 'dist'
      build_args:
        description: 'Docker build arguments (JSON format)'
        required: false
        type: string
        default: '{}'
      push_image:
        description: 'Whether to push the image'
        required: false
        type: boolean
        default: true
    outputs:
      image_uri:
        description: 'URI of the built Docker image'
        value: ${{ jobs.docker.outputs.image_uri }}

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_uri: ${{ steps.image_info.outputs.uri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ./build-context/${{ inputs.artifact_destination }}

      - name: List build context files
        run: ls -lat ./build-context/${{ inputs.artifact_destination }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: ${{ inputs.push_image }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image_project }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}
            type=sha,format=short

      - name: Convert build args JSON to env
        id: build_args
        run: |
          JSON='${{ inputs.build_args }}'
          if [ "$JSON" != "{}" ]; then
            echo "args=$(echo $JSON | jq -r 'to_entries | map("\(.key)=\(.value)") | join(",")' | sed 's/,/ --build-arg /g')" >> $GITHUB_OUTPUT
          else
            echo "args=" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./build-context
          file: ${{ inputs.dockerfile_path }}
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            com.etn.cpc.iot.image.title=Application for ${{ inputs.image-name }}
            com.etn.cpc.iot.image.description=CPC Iot Application: ${{ inputs.image-name }}
            com.etn.cpc.iot.image.vendor=${{ github.repository_owner }}
            com.etn.cpc.iot.image.version=${{ inputs.image-tag }}
            com.etn.cpc.iot.image.created={{date 'yyyy-MM-dd'}}
            com.etn.cpc.iot.image.source=${{ github.server_url }}/${{ github.repository }}
          build-args: ${{ steps.build_args.outputs.args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image URI
        id: image_info
        run: |
          echo "uri=${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image_project }}/${{ inputs.image_name }}:${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          
      # In the docker job, add these steps after the "Output image URI" step
      - name: Generate build summary
        if: ${{ inputs.push_image }}
        run: |
          echo "## ðŸš¢ Docker Image Published âœ…" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image** | \`${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image_project }}/${{ inputs.image_name }}:${{ inputs.image_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **SHA Tag** | \`sha-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Built from** | ${{ github.repository }} @ ${{ github.ref }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build time** | $(date) |" >> $GITHUB_STEP_SUMMARY
