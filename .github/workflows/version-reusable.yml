name: Version Calculator

on:
  workflow_call:
    outputs:
      version:
        description: 'Calculated version for the build'
        value: ${{ jobs.calculate-version.outputs.version }}
      is-release:
        description: 'Whether this is a release build'
        value: ${{ jobs.calculate-version.outputs.is-release }}

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-release: ${{ steps.version.outputs.is-release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: version
        shell: bash
        run: |
          # Helper functions
          get_base_version() {
            local latest_tag=$(git tag -l "v*.*.*" --sort=-version:refname | head -n 1)
            if [ -z "$latest_tag" ]; then
              echo "No version tags found matching v*.*.* pattern, using default version 1.0.0" >&2
              echo "1.0.0"
            else
              local base_version=$(echo $latest_tag | sed 's/^v//')
              echo "Found latest version tag: $latest_tag -> base version: $base_version" >&2
              echo "$base_version"
            fi
          }

          get_branch_info() {
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Pull request detected:" >&2
              echo "  Source branch: ${{ github.head_ref }}" >&2
              echo "  Target branch: ${{ github.base_ref }}" >&2
              echo "${{ github.head_ref }}|${{ github.base_ref }}|${{ github.base_ref }}"
            else
              echo "Using current branch: ${{ github.ref_name }}" >&2
              echo "${{ github.ref_name }}||${{ github.ref_name }}"
            fi
          }

          extract_release_version() {
            local branch="$1"
            if [[ "$branch" =~ ^release/([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              echo "${BASH_REMATCH[1]}|${BASH_REMATCH[2]}|${BASH_REMATCH[3]}"
            else
              echo "||"
            fi
          }

          increment_version() {
            local base_version="$1"
            local increment_type="$2"
            local release_major="$3"
            local release_minor="$4"

            IFS='.' read -r major minor patch <<< "$base_version"

            case "$increment_type" in
              "minor_from_release")
                echo "${release_major}.$((release_minor + 1)).0"
                ;;
              "minor")
                echo "${major}.$((minor + 1)).0"
                ;;
              "patch")
                echo "${major}.${minor}.$((patch + 1))"
                ;;
              *)
                echo "$base_version"
                ;;
            esac
          }

          build_version_suffix() {
            local suffix_type="$1"
            local pr_number="$2"
            local extra="$3"

            case "$suffix_type" in
              "pr")
                echo "-pr.${pr_number}"
                ;;
              "final_pr")
                echo "-final.pr.${pr_number}"
                ;;
              "hotfix_pr")
                echo "-hotfix.pr.${pr_number}"
                ;;
              "rc")
                echo "-rc.${extra}"
                ;;
              "dev")
                echo "-dev.${extra}"
                ;;
              "hotfix")
                echo "-hotfix.${extra}"
                ;;
              "branch_pr")
                echo "-${extra}.pr.${pr_number}"
                ;;
              "branch")
                echo "-${extra}"
                ;;
              "feature")
                echo "-feature.${extra}"
                ;;
              *)
                echo ""
                ;;
            esac
          }

          # Main logic
          BASE_VERSION=$(get_base_version)
          IFS='|' read -r SOURCE_BRANCH TARGET_BRANCH BRANCH_NAME <<< "$(get_branch_info)"

          IS_RELEASE="false"
          VERSION=""

          # Determine the working branch (target branch for PRs, current branch otherwise)
          WORKING_BRANCH="$TARGET_BRANCH"
          [[ -z "$WORKING_BRANCH" ]] && WORKING_BRANCH="$BRANCH_NAME"
          
          echo "Working branch: $WORKING_BRANCH"
          echo "Source branch: $SOURCE_BRANCH"
          echo "Base version: $BASE_VERSION"

          # Process based on target branch and source branch type
          if [[ "$WORKING_BRANCH" == "main" ]]; then
            # Main branch logic
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              if [[ "$SOURCE_BRANCH" =~ ^release/.* ]]; then
                # Release to main PR
                IS_RELEASE="true"
                IFS='|' read -r rel_major rel_minor rel_patch <<< "$(extract_release_version "$SOURCE_BRANCH")"
                if [[ -n "$rel_major" && -n "$rel_minor" ]]; then
                  VERSION="${rel_major}.${rel_minor}.${rel_patch}"
                  echo "Release to main PR detected - using version from release branch: $VERSION"
                else
                  VERSION=$(increment_version "$BASE_VERSION" "minor")
                  echo "Release to main PR detected - incrementing minor version from base: $VERSION"
                fi
              elif [[ "$SOURCE_BRANCH" =~ ^hotfix/.* ]]; then
                # Hotfix to main PR
                IS_RELEASE="true"
                VERSION=$(increment_version "$BASE_VERSION" "patch")
                echo "Hotfix to main PR detected - incrementing patch version: $VERSION"
              else
                # Other branch to main - not a release
                VERSION="${BASE_VERSION}$(build_version_suffix "branch_pr" "${{ github.event.pull_request.number }}" "to-main")"
                echo "PR to main detected (not release or hotfix) - using suffix: $VERSION"
              fi
            else
              # Direct push to main (should be rare)
              IS_RELEASE="true"
              VERSION="$BASE_VERSION"
              echo "Direct push to main - using base version: $VERSION"
            fi

          elif [[ "$WORKING_BRANCH" =~ ^release/.* ]]; then
            # Release branch logic
            if [[ "$WORKING_BRANCH" =~ ^release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              release_version="${BASH_REMATCH[1]}"
              echo "Working with release branch version: $release_version"
          
              if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                # PR to release branch
                VERSION="${release_version}$(build_version_suffix "pr" "${{ github.event.pull_request.number }}" "")"
              else
                # Direct push to release branch
                rc_number=$(git rev-list --count HEAD)
                VERSION="${release_version}$(build_version_suffix "rc" "" "$rc_number")"
              fi
            else
              # Malformed release branch
              VERSION="${BASE_VERSION}$(build_version_suffix "branch" "" "release")"
            fi

          elif [[ "$WORKING_BRANCH" == "develop" ]]; then
            # Develop branch logic
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              # PR to develop
              VERSION="${BASE_VERSION}$(build_version_suffix "branch_pr" "${{ github.event.pull_request.number }}" "to-dev")"
            else
              # Direct push to develop
              build_number=$(git rev-list --count HEAD)
              VERSION="${BASE_VERSION}$(build_version_suffix "dev" "" "$build_number")"
            fi

          elif [[ "$WORKING_BRANCH" =~ ^feature/.* ]]; then
            # Feature branch logic
            commit_hash=$(git rev-parse --short HEAD)
            clean_branch_name=$(echo "$WORKING_BRANCH" | sed 's/^feature\///' | sed 's/[^a-zA-Z0-9]/-/g')
            VERSION="${BASE_VERSION}$(build_version_suffix "feature" "" "${clean_branch_name}.${commit_hash}")"

          elif [[ "$WORKING_BRANCH" =~ ^hotfix/.* ]]; then
            # Hotfix branch logic
            commit_hash=$(git rev-parse --short HEAD)
            clean_branch_name=$(echo "$WORKING_BRANCH" | sed 's/^hotfix\///' | sed 's/[^a-zA-Z0-9]/-/g')
            VERSION="${BASE_VERSION}$(build_version_suffix "hotfix" "" "${clean_branch_name}.${commit_hash}")"
          
          else
            # Other branches
            commit_hash=$(git rev-parse --short HEAD)
            clean_branch_name=$(echo "$WORKING_BRANCH" | sed 's/[^a-zA-Z0-9]/-/g')
          
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              # PR from other branch
              pr_number="${{ github.event.pull_request.number }}"
              clean_target=$(echo "$TARGET_BRANCH" | sed 's/[^a-zA-Z0-9]/-/g')
              clean_source=$(echo "$SOURCE_BRANCH" | sed 's/[^a-zA-Z0-9]/-/g')
              VERSION="${BASE_VERSION}$(build_version_suffix "branch_pr" "$pr_number" "${clean_source}.to-${clean_target}")"
            else
              # Direct push to other branch
              VERSION="${BASE_VERSION}$(build_version_suffix "branch" "" "${clean_branch_name}.${commit_hash}")"
            fi
          fi

          echo "Calculated version: $VERSION"
          echo "Is release build: $IS_RELEASE"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-release=$IS_RELEASE" >> $GITHUB_OUTPUT

      - name: Output version info to summary
        shell: bash
        run: |
          echo "## Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release build:** ${{ steps.version.outputs.is-release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base version:** $(git tag -l "v*.*.*" --sort=-version:refname | head -n 1 | sed 's/^v//')" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- **PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Source branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Target branch:** ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- **Commit hash:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY