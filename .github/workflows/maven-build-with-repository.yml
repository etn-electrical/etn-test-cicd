name: Maven Build Workflow with Specified Repository

on:
  workflow_call:
    secrets:
      PACKAGE_TOKEN:
        required: true
    inputs:
      java-version:
        required: false
        type: string
        default: '17'
        description: 'Java version to use for the build'
      maven-args:
        required: false
        type: string
        default: 'clean package'
        description: 'Maven arguments for build'
      run-tests:
        required: false
        type: boolean
        default: true
        description: 'Whether to run tests'
      artifact-name:
        required: false
        type: string
        default: 'app-artifact'
        description: 'Name for the uploaded artifact'
      remote-repository:
        required: false
        type: string
        default: ''
        description: 'Optional remote repository to checkout and build'
    outputs:
      jar-path:
        description: "Path to the built JAR file"
        value: ${{ jobs.build.outputs.jar-path }}

jobs:
  build:
    name: Build Spring Boot Application
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.find-jar.outputs.jar-path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Setup Maven settings.xml
        run: |
          mkdir -p $HOME/.m2
          cat > $HOME/.m2/settings.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
          http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>ericsunf22</username>
                <password>${{ secrets.PACKAGE_TOKEN }}</password>
              </server>
            </servers>
            <profiles>
              <profile>
              <id>github</id>
              <repositories>
                <repository>
                  <id>central</id>
                  <url>https://repo1.maven.org/maven2</url>
                </repository>
                <repository>
                  <id>github</id>
                  <url>https://maven.pkg.github.com/etn-electrical/etn-test-cicd</url>
                  <snapshots>
                    <enabled>true</enabled>
                  </snapshots>
                </repository>
              </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
          </settings>
          EOF
      - name: Checkout and build from remote repository
        if: ${{ inputs.remote-repository != '' }}
        run: |
          # Create a temporary directory for the remote repository
          mkdir -p remote-repo
          cd remote-repo

          # Clone using HTTPS with token authentication
          if [[ "${{ inputs.remote-repository }}" == *"github.com"* ]]; then
            # For GitHub repositories, use the PACKAGE_TOKEN
            REPO_URL=$(echo "${{ inputs.remote-repository }}" | sed 's|git@github.com:|https://github.com/|' | sed 's|\.git$||')
            git clone https://x-access-token:${{ secrets.PACKAGE_TOKEN }}@${REPO_URL#https://}.git .
            echo "✅ Cloned GitHub repository using token authentication"
          else
            # For other repositories, use the provided URL directly
            git clone ${{ inputs.remote-repository }} .
            echo "✅ Cloned repository using provided URL"
          fi

          echo "✅ Cloned remote repository: ${{ inputs.remote-repository }}: "
          ls -alth
          java -version
          git status
          # Check if pom.xml exists
          if [ ! -f "pom.xml" ]; then
            echo "❌ Error: pom.xml not found in the remote repository"
            exit 1
          fi

          echo "✅ pom.xml found in remote repository" 

      - name: Deploy with Maven (Skip Tests)
        if: ${{ !inputs.run-tests }}
        run: |
          cd remote-repo
          mvn -B ${{ inputs.maven-args }} -DskipTests -P github
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Deploy with Maven (With Tests)
        if: ${{ inputs.run-tests }}
        run: |
          cd remote-repo
          mvn -B ${{ inputs.maven-args }} -P github
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}

      - name: Find JAR file
        id: find-jar
        run: |
          cd remote-repo
          JAR_PATH=$(find target -name "*.jar" -not -name "*sources.jar" -not -name "*javadoc.jar" | head -n 1)
          echo "jar-path=${JAR_PATH}" >> $GITHUB_OUTPUT
          echo "Found JAR: ${JAR_PATH}"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.find-jar.outputs.jar-path }}
          retention-days: 7