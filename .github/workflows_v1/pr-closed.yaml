name: PR Closed

on:
  pull_request:
    types: [closed]
    branches: [main, develop, release/*, hotfix/*]

# Set permissions for all jobs in this workflow
permissions:
  contents: write       # Needed for checkout, tagging and releases
  actions: read         # Needed for workflow runs
  pull-requests: write  # Needed for commenting on PRs
  pages: write          # Needed for GitHub Pages
  id-token: write       # Needed for security scanning
  issues: read          # Needed for referencing issues
  checks: write         # Needed for test results

jobs:
  prepare:
    name: Prepare Closed PR
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      was-merged: ${{ github.event.pull_request.merged }}
      target-branch: ${{ github.event.pull_request.base.ref }}
      source-branch: ${{ github.event.pull_request.head.ref }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print PR Info
        run: |
          echo "PR #${{ github.event.pull_request.number }} closed: ${{ github.event.pull_request.title }}"
          echo "Source branch: ${{ github.event.pull_request.head.ref }}"
          echo "Target branch: ${{ github.event.pull_request.base.ref }}"
          echo "Was merged: ${{ github.event.pull_request.merged }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"

  cleanup-artifacts:
    name: Cleanup PR Artifacts
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Delete PR artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactsToClean = [
              `test-results-pr-${context.issue.number}`,
              `jacoco-report-pr-${context.issue.number}`,
              `security-report-pr-${context.issue.number}`
            ];
            
            console.log(`Cleaning up artifacts for PR #${context.issue.number}`);
            
            try {
              const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              for (const artifact of artifacts) {
                for (const prefix of artifactsToClean) {
                  if (artifact.name.startsWith(prefix)) {
                    console.log(`Deleting artifact: ${artifact.name} (id: ${artifact.id})`);
                    await github.rest.actions.deleteArtifact({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      artifact_id: artifact.id
                    });
                    break;
                  }
                }
              }
            } catch (error) {
              console.error(`Error cleaning artifacts: ${error}`);
            }

  post-merge-actions:
    name: Post-Merge Actions
    if: needs.prepare.outputs.was-merged == 'true'
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print Merge Info
        run: |
          echo "PR #${{ github.event.pull_request.number }} was merged to ${{ needs.prepare.outputs.target-branch }}"
          echo "Source branch: ${{ needs.prepare.outputs.source-branch }}"

      - name: Add Merged Label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['merged']
            });
            
            // Remove needs-review label if present
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'needs-review'
              });
            } catch (e) {
              // Label might not exist
              console.log("No needs-review label found or other error:", e.message);
            }

      - name: Close Linked Issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Extract issue numbers from PR description using regex
            // Looks for formats like "fixes #123", "closes #456", etc.
            const prBody = context.payload.pull_request.body || '';
            const issueKeywords = ['close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'];
            const issueRegex = new RegExp(`(${issueKeywords.join('|')})\\s+#([0-9]+)`, 'gi');
            
            const issues = [];
            let match;
            while ((match = issueRegex.exec(prBody)) !== null) {
              issues.push(parseInt(match[2], 10));
            }
            
            // Close each linked issue
            for (const issueNumber of issues) {
              try {
                console.log(`Closing issue #${issueNumber}`);
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: 'closed'
                });
                
                // Add comment to the issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `This issue was closed by PR #${context.issue.number}`
                });
              } catch (e) {
                console.log(`Error closing issue #${issueNumber}:`, e.message);
              }
            }

  post-merge-develop-actions:
    name: Post-Merge Develop Actions
    needs: [prepare, post-merge-actions]
    if: needs.prepare.outputs.was-merged == 'true' && needs.prepare.outputs.target-branch == 'develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print Develop Merge Info
        run: |
          echo "PR #${{ github.event.pull_request.number }} was merged to develop"
          echo "Triggering develop branch workflows"

      - name: Trigger Develop Branch Build
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: develop-updated
          client-payload: '{"pr_number": "${{ github.event.pull_request.number }}", "merged_by": "${{ github.event.pull_request.merged_by.login }}"}'

  post-merge-main-actions:
    name: Post-Merge Main Actions
    needs: [prepare, post-merge-actions]
    if: needs.prepare.outputs.was-merged == 'true' && needs.prepare.outputs.target-branch == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print Main Merge Info
        run: |
          echo "PR #${{ github.event.pull_request.number }} was merged to main"
          echo "Triggering main branch workflows"

      - name: Trigger Main Branch Build
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: main-updated
          client-payload: '{"pr_number": "${{ github.event.pull_request.number }}", "merged_by": "${{ github.event.pull_request.merged_by.login }}"}'
