name: Handle Push Events

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-version: ${{ steps.set-env.outputs.should-version }}
    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should-version=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-version=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/heads/release/.+ ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-version=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/heads/feature/.+ ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-version=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/.+ ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-version=true" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-version=false" >> $GITHUB_OUTPUT
          fi

  calculate-version:
    needs: determine-environment
    if: needs.determine-environment.outputs.should-version == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate Semantic Version
        id: semver
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Remove the 'v' prefix
          CURRENT_VERSION=${LATEST_TAG#v}
          
          # Parse version components
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Determine the type of version bump based on the branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # On main, increment minor version
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ github.ref }}" =~ ^refs/heads/release/.+ ]]; then
            # On release branch, increment patch version
            PATCH=$((PATCH + 1))
          elif [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/.+ ]]; then
            # On hotfix branch, increment patch version
            PATCH=$((PATCH + 1))
          fi
          
          # Create the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Calculated version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: [determine-environment, calculate-version]
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
      VERSION: ${{ needs.calculate-version.outputs.version || '0.0.0-SNAPSHOT' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Check and update pom.xml with required plugins
        run: |
          chmod +x ./scripts/check-and-update-pom.sh
          ./scripts/check-and-update-pom.sh

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-${{ env.ENVIRONMENT }}-${{ env.VERSION }}
          path: target/*.jar
          retention-days: 5

  test:
    needs: [determine-environment, build]
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Unit Tests and Generate Coverage Report
        run: mvn -B test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ env.ENVIRONMENT }}
          path: target/surefire-reports
          retention-days: 5

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ env.ENVIRONMENT }}
          path: target/site/jacoco
          retention-days: 5

  sonarqube:
    needs: [test]
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=etn-test-cicd \
            -Dsonar.projectName='ETN Test CICD' \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN
