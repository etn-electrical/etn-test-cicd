name: Main Branch Push

on:
  push:
    branches: ['main']

# Set concurrency to prevent conflicts and cancel redundant runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Set permissions for all jobs in this workflow
permissions:
  contents: write       # Needed for checkout, tagging and releases
  packages: write       # Needed for pushing to GHCR
  actions: read         # Needed for workflow runs
  pull-requests: write  # Needed for commenting on PRs
  pages: write          # Needed for GitHub Pages
  id-token: write       # Needed for security scanning
  issues: read          # Needed for referencing issues
  checks: write         # Needed for test results

jobs:
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print Branch Info
        run: |
          echo "Current branch: ${GITHUB_REF#refs/heads/}"
          echo "Branch name: ${{ github.ref_name }}"
          echo "GitHub ref: ${{ github.ref }}"

      - name: Determine Environment
        id: determine-env
        run: |
          echo "environment=production" >> $GITHUB_OUTPUT

  version-management:
    name: Version Management
    uses: ./.github/workflows/version.yaml
    with:
      java-version: '17'
    secrets: inherit
    permissions: write-all

  build-and-test:
    name: Build and Test
    needs: [prepare, version-management]
    if: always() && needs.prepare.result == 'success'
    uses: ./.github/workflows/build.yaml
    with:
      java-version: '17'
      maven-args: 'clean verify'
      version-args: ${{ needs.version-management.outputs.version || 'SNAPSHOT' }}
    secrets: inherit
    permissions: write-all

  quality-check:
    name: Post-Merge Quality
    needs: [prepare, version-management, build-and-test]
    if: needs.build-and-test.result == 'success'
    uses: ./.github/workflows/quality.yaml
    with:
      java-version: '17'
      maven-args: 'clean test'
      version-args: ${{ needs.version-management.outputs.version }}
      context: 'merge'
      skip-reports: false
      skip-sonar: false
    secrets: inherit
    permissions: write-all

  build-docker:
    name: Build and Push Docker Image
    needs: [quality-check, version-management]
    if: needs.quality-check.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Print Branch Info
        run: |
          echo "Current branch: ${GITHUB_REF#refs/heads/}"
          echo "Branch name: ${{ github.ref_name }}"

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.7.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/etn_sc_client:${{ needs.version-management.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/etn_sc_client:latest

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/etn_sc_client:${{ needs.version-management.outputs.version }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy-production:
    name: Deploy to Production
    needs: [prepare, build-docker, version-management]
    if: needs.prepare.outputs.environment == 'production' && needs.build-docker.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print Branch Info
        run: |
          echo "Current branch: ${GITHUB_REF#refs/heads/}"
          echo "Branch name: ${{ github.ref_name }}"
          echo "Deploying version: ${{ needs.version-management.outputs.version }}"

      - name: Deploy with Docker Compose
        env:
          IMAGE_TAG: ${{ needs.version-management.outputs.version }}
        run: |
          echo "IMAGE=ghcr.io/${{ github.repository_owner }}/etn_sc_client:${IMAGE_TAG}" > .env
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d

      - name: Verify Deployment
        run: |
          echo "Waiting for application to start..."
          max_attempts=10
          counter=0
          while [ $counter -lt $max_attempts ]
          do
            if docker ps | grep -q etn_sc_client; then
              if curl -s http://localhost:8080/health 2>/dev/null | grep -q "UP"; then
                echo "Service is healthy!"
                exit 0
              elif [ $counter -ge 3 ]; then
                echo "Container is running, continuing anyway"
                exit 0
              fi
            fi
            echo "Waiting for service... (attempt $counter of $max_attempts)"
            sleep 10
            counter=$((counter+1))
          done
          
          if docker ps | grep -q etn_sc_client; then
            echo "Container is running but health check failed. Continuing anyway."
            exit 0
          else
            echo "Service failed to start within timeout!"
            exit 1
          fi

  create-release:
    name: Create GitHub Release
    needs: [prepare, build-and-test, quality-check, build-docker, version-management]
    if: needs.build-docker.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: artifacts/

      - name: Download JaCoCo Report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report-${{ github.run_id }}
          path: reports/jacoco/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.version-management.outputs.version }}
          tag_name: v${{ needs.version-management.outputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/*.jar
            reports/jacoco/**
          generate_release_notes: true
          discussion_category_name: "Releases"
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-slack:
    name: Notify Team
    needs: [deploy-production, version-management]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "üöÄ *ETN SC Client Production Deployment*\n\nVersion: ${{ needs.version-management.outputs.version }}\nStatus: ${{ needs.deploy-production.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}\nEnvironment: Production\nBranch: main\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
